/*
**本类代码由代码生成器自动生成，可以根据需要修改
**生成时间：@DateTime.Now
*/



using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AdminFrameWork.Constant;
using AdminFrameWork.Mvc;
using Microsoft.AspNetCore.Mvc;
using AdminFrameWork.RepositoryPattern;
using Microsoft.AspNetCore.Http;
using AdminFrameWork.Mvc.Authorize;
using @(Model.Project.Namespace).ViewModel.@Model.ApiCode;

namespace {Namespace}
{

    public partial class @(Model.ApiCode)Controller : Controller
    {
		@{
			var actionMethod = "HttpGet";
			var paramsFrom = "";
			switch(Model.ActionMethod) {
				case "DELETE":
					actionMethod = "HttpDelete";
					break;
				case "PUT":
					actionMethod = "HttpPut";
					break;
				case "POST":
					actionMethod = "HttpPost";
					break;
				default:
					paramsFrom = "[FromQuery]";
					break;
			}

			var responseType = string.Empty;

			if(Model.IsList || Model.IsResultPaging) { 
				responseType = "IList<"+Model.ActionName+"ResponseModel>";
			}
			if(Model.IsResultBool) { 
				responseType = "bool";
			}
			if(Model.IsResultInt) { 
				responseType = "int";
			}

			var param_id = "";
			if(@Model.ActionRoute.Contains("{id}")) {
				param_id = "int id, ";
			}
		}

		/// <summary>
        /// @Model.ApiName
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
		[@(Model.IsAuthorize ? "UserAuthorize, " : "")@(actionMethod)("@Model.ActionRoute")]
        //[ProducesResponseType(typeof(CustomersRootObject), (int)HttpStatusCode.OK)]
        //[ProducesResponseType(typeof(ErrorsRootObject), (int)HttpStatusCode.BadRequest)]
        //[ProducesResponseType(typeof(string), (int)HttpStatusCode.Unauthorized)]
        [GetRequestsErrorInterceptorActionFilter]
		public IActionResult @(Model.ActionName)(@param_id@paramsFrom@(Model.ActionName)RequestModel request)
        {
			var resp = new @responseType() { };
            try
            {

            }
            catch (Exception ex)
            {

            }
			return RawJsonResult(resp);
        }
    }
}